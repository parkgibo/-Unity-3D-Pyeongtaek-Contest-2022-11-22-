using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class unity20220629 : MonoBehaviour
{
    private void Start()
    {
        Debug.Log("Hello.unity!");


        //1. 변수처리
        /*
        int level = 5;
        float strength = 5.15f;
        string Player = "이게바로나야";
        bool isfullLevel = false;
        
        Debug.Log("용사의 이름은 ?");
        Debug.Log(Player);
        Debug.Log("현재레벨은?");
        Debug.Log(level);
        Debug.Log("스테미나");
        Debug.Log(strength);
        Debug.Log("만렙임?");
        Debug.Log(isfullLevel);
        
       
        
        //2. 그룹형 변수
        string[] monster = { "나가죽어인마", "너나죽어인마", "시료시료" };
        
        Debug.Log("몬스터 같이 말한 대사는?");
        Debug.Log(monster[0]);
        Debug.Log(monster[1]);
        Debug.Log(monster[2]);

        int[] MonsterLevel = new int [3];
        
        MonsterLevel[0] = 1;
        MonsterLevel[1] = 6;
        MonsterLevel[2] = 30;
        Debug.Log("몬스터 레벨은?");
        Debug.Log(MonsterLevel[0]);
        Debug.Log(MonsterLevel[1]);
        Debug.Log(MonsterLevel[2]);
        // 리스트 변수 (기능이 추가된 가변형 그룹형 변수)
        List<string> item = new List<string>();
        item.Add("생명물약 (30)");
        item.Add("마나물약 (30)");

        //안에 있는 데이터를 삭제할수가 있음
        //이상태로 실행을 시키면 크기를 벗어난 탐색이라 오류가 발생하는데 이 오류가 인덱스 오류라고 함
        item.RemoveAt(0);

        Debug.Log("가지고 있는 아이템");
        Debug.Log(item[0]);
        Debug.Log(item[1]);*/



        //3..연산자
        /*int exp = 1500;

        exp = 1500 + 320;
        exp = exp - 10;
        level = exp / 300;
        strength = level * 3.14f;

        Debug.Log("총 경험치");
        Debug.Log(exp);
        Debug.Log("레벨");
        Debug.Log(level);
        Debug.Log("파워");
        Debug.Log(strength);

        int nextExp = 300 - (exp % 300);
        Debug.Log("다음 레벨까지 남은 경험치는?");
        Debug.Log(nextExp);

        string title = "전설의";
        Debug.Log("이름");
        Debug.Log(title + " " + Player);

        int fullLevel = 99;
        isfullLevel = level == fullLevel;
        Debug.Log("용사는 만렙입니까?" + isfullLevel);

        // 프로그래밍 부동호 >(초과) <(미만) >= (이상) <=(이하)
        bool Tutorial = level > 10; 
        Debug.Log("튜토리얼 끝낫냐?" + Tutorial);

        int health = 30;
        int mana = 25;
        //bool condition = health <= 50 && mana <= 20;
        // ||(OR) : 두 값 중에서 하나만 true이면 true 출력
        bool condition = health <= 50 || mana <= 20;
        // &&(AND) : 두 값이 모두 true일 때만 true 출력
        //Debug.Log("상태가 나빠?" + condition);

        // ? A:B : true 일때 A, false일 때 B 출력
        string iscondition = condition ? "나쁨" : "좋음";
        Debug.Log("상태가 나빠?" + condition);
        */


        //4.키워드
        // int float string bool new list


        //5.조건문
        //if : 조건이 true일때, 로직 발생
        /*string Mrpark = "좋음";
        
        if (Mrpark == "나쁨")
        {
            Debug.Log("상태가 나빠서 아이템 사용.");
        }
        else
        {
            Debug.Log("상태가 좋음");
        }
        if (iscondition && item[0] == "생명물약30");
        {
            item.RemoveAt(0);
            health += 30
                }
        else if
        {
           (iscondition && item[0] == "마나물약30") ;
           item.RemoveAt(0);
           mana += 30
        }

        // swich, case : 변수의 값에 따라 로직 실행

        switch (monster[1])
        {
            case "슬라임":
                Debug.Log("소령 몬스터가 출현!");
                break;
            case "악마":
                Debug.Log("중형 몬스터가 출현!");
                break;
            case "골렘":
                Debug.Log("대형 몬스터가 출현!");
                break;
            default:
                Debug.Log("??? 몬스터가 출현!");
                break;
        }
        //defult : 모든 case를 통과한 후 실행*/


        //6.반복문
        //반복문 : 조건에 만족하면 로직을 반복하는 제어문
        /*int HP = 30;
        while (HP > 0) {
            HP--;
            //Debug.Log("독 데미지 입음" + HP);
            if (HP > 0)
                Debug.Log("독 데미지 입음" + HP);
            else
                Debug.Log("사망");
            if(HP == 10)
            {
                Debug.Log("해독제 사용");
                break;
            }
        }
        // for : 변수를 연산하면서 로직 반복 실행
        for (int count = 0; count < 10; count++)
        {
            HP++;
            Debug.Log("붕대로 치료...." + HP);
        }
        // 그룹형 변수 길이 : .Langth(배열) .Count(리스트)
        string[] Mmonster = { "나가 죽는다", "누누", "마자용" };
        for (int index = 0; index < Mmonster.Length; index++)
        {
            //Debug.Log("나와바리 몬스터" + Mmonster[index]);

        }
        // foreach : for의 그룹형변수 탐색 특화
        foreach(string monster in Mmonster)
        {
            Debug.Log("나와바리 몬스터 :" + Mmonster);
        }*/

        //7. 함수(메소드)


    }

}
